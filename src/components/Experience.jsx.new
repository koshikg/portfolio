// filepath: c:\workspaces\private\portfolio\src\components\Experience.jsx
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import experienceData from '../data/experience.json';

export default function Experience() {
  const [selectedCompany, setSelectedCompany] = useState(null);
  const [activeRoleId, setActiveRoleId] = useState(null);
  
  // Group jobs by company
  const companiesWithJobs = (() => {
    const groupedByCompany = experienceData.reduce((acc, job, idx) => {
      const companyName = job.company.split(' / ')[0]; // Get main company name before "/"
      if (!acc[companyName]) {
        acc[companyName] = {
          name: companyName,
          location: job.location,
          roles: []
        };
      }
      // Add uniqueId to each role for tracking
      acc[companyName].roles.push({...job, uniqueId: idx});
      return acc;
    }, {});
    
    // Convert to array and sort by most recent role in each company
    return Object.values(groupedByCompany)
      .map(company => ({
        ...company,
        // Sort roles by date (newest first)
        roles: company.roles.sort((a, b) => {
          const getYear = range => parseInt(range.split(' - ')[1]?.split(' ')[0] || range.split(' - ')[0].split(' ')[0]);
          return getYear(b.range) - getYear(a.range);
        }),
        // Get latest role's year for sorting companies
        latestYear: company.roles[0].range.split(' - ')[1]?.includes('Present') ? 
          new Date().getFullYear() : 
          company.roles[0].range.split(' - ')[1]?.split(' ')[0] || company.roles[0].range.split(' - ')[0].split(' ')[0]
      }))
      .sort((a, b) => parseInt(b.latestYear) - parseInt(a.latestYear));
  })();
  
  // Set initial company and role selection
  useEffect(() => {
    if (companiesWithJobs.length > 0 && selectedCompany === null) {
      setSelectedCompany(companiesWithJobs[0].name);
      if (companiesWithJobs[0].roles.length > 0) {
        setActiveRoleId(companiesWithJobs[0].roles[0].uniqueId);
      }
    }
  }, []);
  
  // Get the selected company data
  const selectedCompanyData = companiesWithJobs.find(company => company.name === selectedCompany);
  
  return (
    <section id="experience" className="py-24 md:py-32 relative overflow-hidden">
      {/* Background accent */}
      <div className="absolute right-0 bottom-0 w-[500px] h-[500px] bg-primary/5 rounded-full blur-3xl translate-x-1/2 translate-y-1/4 dark:bg-primary/10"></div>
      <div className="absolute left-0 top-0 w-[400px] h-[400px] bg-secondary/5 rounded-full blur-3xl -translate-x-1/2 -translate-y-1/4 dark:bg-secondary/10"></div>
      
      <div className="container mx-auto px-4 relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          viewport={{ once: true, margin: "-100px" }}
          className="text-center max-w-3xl mx-auto mb-16"
        >
          <span className="bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent inline-block text-sm font-semibold tracking-wider uppercase mb-4">Professional Journey</span>
          <h2 className="text-4xl md:text-5xl font-bold mb-6 text-gray-900 dark:text-white font-display">
            Where I've Worked
          </h2>
          <p className="text-gray-600 dark:text-gray-300 text-lg">
            My professional experience in DevOps and cloud engineering roles
          </p>
        </motion.div>
        
        {/* Company tabs */}
        <div className="flex overflow-x-auto pb-4 mb-8 max-w-6xl mx-auto">
          <div className="flex gap-3 mx-auto">
            {companiesWithJobs.map((company, index) => (
              <motion.button
                key={company.name}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: index * 0.1 }}
                viewport={{ once: true, margin: "-50px" }}
                onClick={() => {
                  setSelectedCompany(company.name);
                  if (company.roles.length > 0) {
                    setActiveRoleId(company.roles[0].uniqueId);
                  }
                }}
                className={`relative px-5 py-3 rounded-full font-medium text-sm whitespace-nowrap transition-all duration-200 ${
                  selectedCompany === company.name
                    ? 'bg-primary text-white shadow-lg shadow-primary/20'
                    : 'bg-white dark:bg-dark-secondary text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800/70'
                }`}
              >
                {company.name}
              </motion.button>
            ))}
          </div>
        </div>
        
        {/* Timeline */}
        {selectedCompanyData && (
          <div className="max-w-5xl mx-auto">
            <div className="mb-8 p-6 bg-white dark:bg-dark-secondary rounded-2xl shadow-lg">
              <div className="flex items-center gap-4 mb-4">
                <div className="w-16 h-16 rounded-xl bg-gradient-to-br from-primary/10 to-secondary/10 dark:from-primary/20 dark:to-secondary/20 flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-primary dark:text-primary-light" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                  </svg>
                </div>
                <div>
                  <h3 className="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white">
                    {selectedCompanyData.name}
                  </h3>
                  <p className="text-gray-600 dark:text-gray-400 mt-1">
                    {selectedCompanyData.location}
                  </p>
                </div>
              </div>
            </div>
            
            {/* Timeline for roles */}
            <div className="relative">
              {/* Vertical line */}
              <div className="absolute left-8 md:left-[5.5rem] top-0 bottom-0 w-1 bg-gradient-to-b from-primary/30 to-secondary/30 dark:from-primary/50 dark:to-secondary/50 rounded-full"></div>
              
              <div className="space-y-8 relative z-10">
                {selectedCompanyData.roles.map((role, index) => (
                  <div key={role.uniqueId} className="relative">
                    {/* Timeline dot */}
                    <motion.div
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      transition={{ delay: index * 0.1, duration: 0.5, type: 'spring' }}
                      className={`absolute left-7 md:left-[5.25rem] top-6 w-3 h-3 rounded-full border-2 ${
                        activeRoleId === role.uniqueId
                          ? 'bg-primary border-white dark:border-dark-secondary'
                          : 'bg-white dark:bg-dark-secondary border-primary/50'
                      }`}
                    />
                    
                    {/* Role card */}
                    <motion.div
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      whileHover={{ y: -5, boxShadow: '0 10px 20px rgba(0,0,0,0.1)' }}
                      transition={{ duration: 0.3, delay: index * 0.1 }}
                      onClick={() => setActiveRoleId(role.uniqueId)}
                      className={`flex flex-col md:flex-row ml-16 md:ml-28 pl-8 pr-6 py-4 md:py-6 rounded-xl cursor-pointer transition-all ${
                        activeRoleId === role.uniqueId
                          ? 'bg-gradient-to-br from-primary/5 to-secondary/5 dark:from-primary/10 dark:to-secondary/10 border border-primary/20'
                          : 'bg-white dark:bg-dark-secondary hover:bg-gray-50 dark:hover:bg-gray-800/70'
                      }`}
                    >
                      {/* Year */}
                      <div className="absolute left-0 top-5 md:top-6 w-14 md:w-20 text-right">
                        <span className={`font-mono text-sm font-bold ${
                          activeRoleId === role.uniqueId
                            ? 'text-primary dark:text-primary-light'
                            : 'text-gray-500 dark:text-gray-400'
                        }`}>
                          {role.range.split(' - ')[0].split(' ')[0]}
                        </span>
                      </div>
                      
                      <div className="flex-1">
                        <h3 className={`font-bold text-lg md:text-xl mb-1 ${
                          activeRoleId === role.uniqueId
                            ? 'text-primary dark:text-primary-light'
                            : 'text-gray-900 dark:text-white'
                        }`}>
                          {role.title}
                        </h3>
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
                          {role.range}
                        </p>
                        
                        {activeRoleId === role.uniqueId && (
                          <AnimatePresence>
                            <motion.div
                              initial={{ opacity: 0, height: 0 }}
                              animate={{ opacity: 1, height: 'auto' }}
                              exit={{ opacity: 0, height: 0 }}
                              transition={{ duration: 0.3 }}
                            >
                              <ul className="mt-4 space-y-3">
                                {role.responsibilities.map((item, idx) => (
                                  <motion.li
                                    key={idx}
                                    className="flex gap-3"
                                    initial={{ opacity: 0, x: -10 }}
                                    animate={{ opacity: 1, x: 0 }}
                                    transition={{ duration: 0.3, delay: idx * 0.1 }}
                                  >
                                    <span className="text-secondary flex-shrink-0 mt-1">
                                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                        <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                                      </svg>
                                    </span>
                                    <span className="text-gray-700 dark:text-gray-300">{item}</span>
                                  </motion.li>
                                ))}
                              </ul>
                            </motion.div>
                          </AnimatePresence>
                        )}
                      </div>
                    </motion.div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
}
